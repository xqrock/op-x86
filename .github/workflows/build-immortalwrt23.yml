#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build immortalwrt23 OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
    - cron: 0 9 */35 * *     
env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-23.05
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: im-23.config
  DIY_P1_SH: im23-part1.sh
  DIY_P2_SH: im23-part2.sh
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Ê£ÄÊü•È°πÁõÆÂàÜÊîØ
      uses: actions/checkout@main

    - name: Ê∏ÖÁêÜÁ£ÅÁõòÁ©∫Èó¥
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: false

        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: ÂÆâË£ÖÁºñËØëÁéØÂ¢É
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        df -hT $PWD
        sudo -E apt-get -qq update
        sudo apt-get install libfuse-dev
        sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: ‰∏ãËΩΩÂõ∫‰ª∂Ê∫êÁ†Å
      working-directory: ./
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: Âä†ËΩΩËá™ÂÆö‰πâËÆæÁΩÆ
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
    - name: ‰∏ãËΩΩÊèí‰ª∂
      run: cd openwrt && ./scripts/feeds clean && ./scripts/feeds update -a

    - name: ËØªÂèñÊèí‰ª∂
      run: cd openwrt && ./scripts/feeds install -a

    - name: Êõ¥ÊîπËÆæÁΩÆ
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSHÈìæÊé•ÁÆ°ÁêÜ
      uses: P3TERX/ssh2actions@main
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: ‰∏ãËΩΩÂÆâË£ÖÂåÖ
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: ÂºÄÂßãÁºñËØëÂõ∫‰ª∂
      id: compile
      run: |
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "FILE_TIME=$(date "+%YÂπ¥%mÊúà%dÊó•-%HÁÇπ")" >> $GITHUB_ENV
        echo "TAG_TIME=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV

        
    - name: Êü•ÁúãÁ£ÅÁõò‰ΩøÁî®ÊÉÖÂÜµ
      if: (!cancelled())
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: ‰∏ä‰º†binÂéãÁº©ÁõÆÂΩï
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: immortalwrt23_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin/packages/x86_64

    - name: Êï¥ÁêÜÁºñËØëÂ•ΩÁöÑÂõ∫‰ª∂
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages && mkdir packages
        find -name "*esxi-flat.vmdk*" | xargs -i mv -f {} packages
        find -name "*kernel.bin*" | xargs -i mv -f {} packages
        find -name "*rootfs*" | xargs -i mv -f {} packages
        find -name "*.manifest*" | xargs -i mv -f {} packages
        find -name "*vmlinuz*" | xargs -i mv -f {} packages
        find -name "*esxi.vmdk*" | xargs -i mv -f {} packages
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: immortalwrt23_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "üîó [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
       
    - name: Upload firmware to release
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: ${{ env.FILE_TIME }}  immortalwrt23
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 180
        keep_minimum_runs: 10

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 15
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
